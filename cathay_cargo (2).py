# -*- coding: utf-8 -*-
"""Cathay Cargo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xTVMCYpP2uRFA3LIby7s013SLEgk3rbg
"""

!pip install requests pandas flask

CATHAY_API_KEY= "0Ws2MAmAseTl39JZLohswZZgWLCxpZ1K"
FLIGHTRADAR_API_KEY= "9d6c7a70-9d0a-47e7-8465-a02ed7b2ba74|pFSlNSLYamshmQ9QB6OKlX3UsndCbAkqkAOPLLdvf10d3cdf"

!pip install python-dotenv

import requests
import pandas as pd


# API endpoint
url = "https://fr24api.flightradar24.com/api/live/flight-positions/full"

# Headers with the API key
headers = {
    'Authorization': f'Bearer {api_key}',
    'Accept-Version': 'v1'
}

# Query parameters to filter flights departing from HKG
params = {
    'airports': 'HKG',
    'categories': 'C'  # Assuming the API supports a 'cargo' filter
}

# Send the GET request to the API endpoint
response = requests.get(url, headers=headers, params=params)

# Check if the request was successful
if response.status_code == 200:
    # Parse JSON data
    data = response.json().get("data", [])

    # Convert the JSON data to a DataFrame
    df = pd.DataFrame(data)

    # Check if the DataFrame has data
    if not df.empty:
        # Display the DataFrame
        print(df)
    else:
        print("No cargo flight data available from HKG.")
else:
    print("Failed to fetch data from API. Status code:", response.status_code)

# prompt: make two dataframes , one with flight code with CX and the other with the rest

cx_flights = df[df['flight'].str.startswith('CX')]
cx_flights = cx_flights[df['orig_iata'].str.startswith("HKG")]
other_flights = df[~df['flight'].str.startswith('CX')]
other_flights = other_flights[df['orig_iata'].str.startswith("HKG")]
print (cx_flights)
print (other_flights)

import requests

params = {
  'access_key': '678e422b8b1e322f1d337cb79c7efe2c',
  'flight_status': 'cancelled',
  'dep_iata': 'HKG'
}

api_result = requests.get('https://api.aviationstack.com/v1/flights', params)

api_response = api_result.json()

# prompt: make a dataframe from apiresponse

import pandas as pd

# Assuming 'api_response' contains the JSON data from the AviationStack API
# Replace this with your actual API response data if it's different.

# Example API response data (replace with your actual data)



# Check if the API response contains data
if 'data' in api_response and api_response['data']:
    # Create a Pandas DataFrame
    df_aviationstack = pd.DataFrame(api_response['data'])

else:
    print("No flight data found in the API response.")

print(df_aviationstack)

the_frame = df_aviationstack['flight'].apply(lambda x: x['iata'])
others = other_flights['flight']
print(the_frame)
print(others)

#print(df.to_dataframe(the_frame))
res = []
for flight in the_frame:
  if flight in others:
    res.append(flight)
print(res)

matched_df_other_flights = pd.DataFrame(columns=df.columns)

# Initialize index
i = 0

# Loop until all values are matched or end of DataFrame is reached
while i < len(res):
    value = res[i]
    matched_rows = other_flights['flight'] == value

    if not matched_rows.empty:
        matched_df_other_flights = pd.concat([matched_df_other_flights, matched_rows], ignore_index=True)

    i += 1
print(matched_df_other_flights)

params = {
  'access_key': '678e422b8b1e322f1d337cb79c7efe2c',
  'airline_name': 'cathay pacific',
  'dep_iata': 'HKG'
}

api_result_cx = requests.get('https://api.aviationstack.com/v1/flights', params)

api_response_cx = api_result_cx.json()

api_response_cx

# prompt: make a dataframe from apiresponse

import pandas as pd

# Assuming 'api_response' contains the JSON data from the AviationStack API
# Replace this with your actual API response data if it's different.

# Example API response data (replace with your actual data)



# Check if the API response contains data
if 'data' in api_response_cx and api_response_cx['data']:
    # Create a Pandas DataFrame
    df_aviationstack_cx = pd.DataFrame(api_response_cx['data'])

else:
    print("No flight data found in the API response.")

print(df_aviationstack_cx)

the_frame = df_aviationstack_cx['flight'].apply(lambda x: x['iata'])
cathay_flights = cx_flights['flight']
print('frame',the_frame)
print('cathay',cathay_flights)
#print(df.to_dataframe(the_frame))
res = []
for flight in the_frame:
  if flight in others:
    res.append(flight)
    print('flight number',flight)
print(res)

matched_df_cx = pd.DataFrame(columns=df.columns)

# Initialize index
i = 0

# Loop until all values are matched or end of DataFrame is reached
while i < len(res):
    value = res[i]
    matched_rows = cx_flights['flight'] == value

    if not matched_rows.empty:
        matched_df_cx = pd.concat([matched_df_cx, matched_rows], ignore_index=True)

    i += 1
print(matched_df_cx)

# Combine the data from the two API responses for Cathay Pacific cargo flights and other flights
combined_df = pd.concat([df_aviationstack, df_aviationstack_cx], ignore_index=True)

# Find the destination airports for the cancelled flights
cancelled_flights_destinations = combined_df[combined_df['flight_status'] == 'cancelled']['arr_iata'].unique()

# Filter out the Cathay Pacific cargo flights departing after the cancelled flight departure to the same destination
matched_cx_flights = matched_df_cx[matched_df_cx['arrival_iata'].isin(cancelled_flights_destinations) & matched_df_cx['departure_time'] > matched_df_other_flights['departure_time'].max()]

print("Cathay Pacific cargo flights departing after the cancelled flight departure to the same destination:")
print(matched_cx_flights)